# ============================================================================
# Raspberry Pi Global Setting
from gpiozero import LED
from gpiozero import PWMLED
from gpiozero import Servo
from time import sleep

# Debug Settings
debug_messages = 1 # If debug messages is 1 then message will be printed, else if 0 they will be silenced
if debug_messages : print("Debug Message are 'ON'")
else : print("Debug Message are 'OFF'")


# Raspberry Pi Pins
r_red_pwm_pin = PWMLED(14)
r_green_pwm_pin = PWMLED(15)
r_blue_pwm_pin = PWMLED(18)

l_red_pwm_pin = PWMLED(27)
l_green_pwm_pin = PWMLED(22)
l_blue_pwm_pin = PWMLED(23)

red_led = LED(3)
yellow_led = LED(4)
green_led = LED(17)

#print(dir(r_red_pwm_pin))
def stop_light(traffic):
    if debug_messages : print("Running stop_light function")
    if debug_messages : print(traffic)
    red,yellow,green = traffic
    if debug_messages : print(traffic[red])
    red_led.value = traffic[red]
    if debug_messages : print(traffic[green])
    yellow_led.value = traffic[yellow]
    if debug_messages : print(traffic[green])
    green_led.value = traffic[green]

def eyes_RGB(eyes):
    if debug_messages : print("Running eyes_RGB function")
    if debug_messages : print(eyes)
    left_eye,right_eye = eyes
    l_red,l_green,l_blue = left_eye
    r_red,r_green,r_blue = right_eye
    r_red_pwm_pin.value = right_eye[r_red]
    r_green_pwm_pin.value = right_eye[r_green]
    r_blue_pwm_pin.value = right_eye[r_blue]
    l_red_pwm_pin.value = left_eye[l_red]
    l_green_pwm_pin.value = left_eye[l_green]
    l_blue_pwm_pin.value = left_eye[l_blue]
    if debug_messages : print(left_eye)
    if debug_messages : print(right_eye)
    
    
    
#arm = Servo(21)
max_correction=0.40 # 0.40
min_correction=0.25 # 0.25
maxPW=(2.0+max_correction)/1000
minPW=(1.0-min_correction)/1000
arm = Servo(21,min_pulse_width=minPW,max_pulse_width=maxPW)
    
def wave(wave_data):
    print(wave_data)
    print(dir(arm))
    while True:
        arm.mid()
        print("mid", arm.value)
        sleep(0.5)
        arm.min()
        print("min", arm.value)
        sleep(1)
        arm.mid()
        print("mid", arm.value)
        sleep(0.5)
        arm.max()
        print("max", arm.value)
        sleep(1)
   
def get_robot_feature_data():
    # HEX #4ebd51 RGB 78, 189, 81
    hex_codegreen = "#4e3a51"
    print(hex_codegreen)
    hex_codered = "ff4f33"
    print(hex_codered)
    hex_codeblue = "0fd3ff"
    print(hex_codeblue)
    hex_red = hex_codered[4:6]
    print(hex_red)
    dec_hex_red = int(hex_red,16)
    print(dec_hex_red)
    red_brightness = dec_hex_red / 256
    print(red_brightness)
    hex_green = hex_codegreen[4:6]
    print(hex_green)
    dec_hex_green = int(hex_green,16)
    print(dec_hex_green)
    green_brightness = dec_hex_green / 256
    print(green_brightness)
    hex_blue = hex_codeblue[4:6]
    print(hex_blue)
    dec_hex_blue = int(hex_blue,16)
    print(dec_hex_blue)
    blue_brightness = dec_hex_blue / 256
    print(blue_brightness)
    if debug_messages : print("Runninng get_robot_feature_data function")
    right_eye = {'leye_red_RGBLED':red_brightness, 'leye_green_RGBLED':green_brightness, 'leye_blue_RGBLED':blue_brightness}
    left_eye =  {'reye_red_RGBLED':red_brightness, 'reye_green_RGBLED':green_brightness, 'reye_blue_RGBLED':blue_brightness}
    stop_light = {'red_LED':1, 'yellow_LED':2, 'green_LED':3}
    # servo
    rfd = [stop_light, left_eye, right_eye]
    if debug_messages : print(rfd)
    if debug_messages : print("Returning get_robot_feature_data function")
    return(rfd)

def main():
#    print("Welcome To The STEAM Clown Makey Bot")
#    if debug_messages : print("Calling get_robot_feature_data function")
    robot_features = get_robot_feature_data()
    stop_light_LEDs, left_RGB, right_RGB = get_robot_feature_data()
    if debug_messages : print(stop_light_LEDs)
    if debug_messages : print(left_RGB)
    if debug_messages : print(right_RGB)
   
    if debug_messages : print("Calling eyes_RGB function")
    eyes_RGB([left_RGB,right_RGB])
    if debug_messages : print("Returned from eyes_RGB function")
    stop_light(stop_light_LEDs)

    if debug_messages : print("Calling arm function")
    wave("Yo")
main()
